package lintutils

import (
	"go/ast"
	"go/token"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/analysis"
)

const (
	genCommentPrefix    = "// Code generated "
	genCommentSuffix    = " DO NOT EDIT."
	swigComment         = "This file was automatically generated by SWIG (http://www.swig.org)."
	thriftCommentPrefix = "// Autogenerated by Thrift Compiler"
)

// IsGenerated reports whether the source file is generated code
// according the rules from https://golang.org/s/generatedcode.
func IsGenerated(file *ast.File) bool {
	for _, group := range file.Comments {
		for _, comment := range group.List {
			if IsGeneratedComment(comment.Text) {
				return true
			}
		}
	}

	return false
}

func IsGeneratedComment(text string) bool {
	commentText := strings.Trim(text, "\n")

	if strings.Contains(commentText, swigComment) {
		return true
	}

	if strings.HasPrefix(commentText, thriftCommentPrefix) {
		return true
	}

	if !strings.HasPrefix(commentText, genCommentPrefix) {
		return false
	}

	if !strings.HasSuffix(commentText, genCommentSuffix) {
		return false
	}

	if len(commentText) <= len(genCommentPrefix)+len(genCommentSuffix) {
		return false
	}

	return true
}

func IsTest(pass *analysis.Pass, file ast.Node) bool {
	f := pass.Fset.File(file.Pos())
	if f == nil {
		return false
	}

	return strings.HasSuffix(f.Name(), "_test.go")
}

// FileOfPos returns file of given ast.Pos
func FileOfPos(pass *analysis.Pass, pos token.Pos) (file *ast.File, found bool) {
	for _, f := range pass.Files {
		if f.Pos() <= pos && f.End() >= pos {
			return f, true
		}
	}
	return
}

func GetGoFilePosition(pass *analysis.Pass, f *ast.File) (token.Position, bool) {
	position := GetFilePositionFor(pass.Fset, f.Pos())

	if filepath.Ext(position.Filename) == ".go" {
		return position, true
	}

	return position, false
}

func GetFilePositionFor(fset *token.FileSet, p token.Pos) token.Position {
	pos := fset.PositionFor(p, true)

	ext := filepath.Ext(pos.Filename)
	if ext != ".go" {
		// position has been adjusted to a non-go file, revert to original file
		return fset.PositionFor(p, false)
	}

	return pos
}

// AdjustPos is a hack to get the right line to display.
// It should not be used outside some specific cases.
func AdjustPos(line, nonAdjLine, adjLine int) int {
	return line + nonAdjLine - adjLine
}
